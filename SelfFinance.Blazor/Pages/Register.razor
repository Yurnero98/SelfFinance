@page "/register"
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation

<h3 class="text-center mb-4">Register</h3>

<div class="d-flex justify-content-center align-items-center" style="min-height: 80vh;">
    <div class="card p-4 shadow" style="min-width: 300px;">
        <div class="mb-3">
            <label for="username" class="form-label">User Name:</label>
            <input id="username" class="form-control" @bind="UserName" />
        </div>
        <div class="mb-3">
            <label for="email" class="form-label">Email:</label>
            <input id="email" class="form-control" @bind="Email" />
        </div>
        <div class="mb-3">
            <label for="password" class="form-label">Password:</label>
            <input id="password" type="password" class="form-control" @bind="Password" />
        </div>

        <button class="btn btn-success w-100" @onclick="HandleRegister">Register</button>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="mt-3 text-danger text-center">@ErrorMessage</div>
        }
    </div>
</div>

@code {
    private string UserName = "";
    private string Email = "";
    private string Password = "";
    private string ErrorMessage = "";

    private async Task HandleRegister()
    {
        ErrorMessage = "";

        var client = HttpClientFactory.CreateClient("SelfFinanceAPI");

        var registerData = new
        {
            UserName,
            Email,
            Password
        };

        var response = await client.PostAsJsonAsync("/api/auth/register", registerData);

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/login");
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            ErrorMessage = $"Registration failed: {error}";
        }
    }
}